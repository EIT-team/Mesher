
#include "warp_mesh.h"


void modify_image(unsigned char * image_data) {

  std::cout << std::endl << "MODIFYING IMAGE DATA" << endl;

  //TODO: Check that input inr file actually has a domain/tissue type assigned.
  // TODO: Do some actual stetching of mesh
  //cout << "Modifying image data" << endl;

  //cout << "Xdim: " << image.xdim() << "  Ydim: " << image.ydim() << "  Zdim: " << image.zdim() << endl;
  //cout << "vX: " << image.vx() << "  vY: " << image.vy() << " vZ: " << image.vz() << endl;

  // The type used (by defualt I think) of image.dat()
  // (generated by by Image_3::read(input_file) ) is unsigned char
  // Need to subsequently cast this to unsigned int to get actual index value
  // Must be a better way to do this?

  // unsigned char * image_data = (unsigned char *)first_element;



  int x,y,z;
  int dim = 200;

  x = 55;
  y=55;
  z= 0;

  // Voxel data is stored as unsigned char by default
  // Casting it to unsigned int is more useful/readable for processing
  unsigned char this_voxel_char;
  unsigned int this_voxel_int;

  for (int i = 0; i < dim*dim*dim; i++) {
    this_voxel_int = (unsigned int)image_data[i];

    // Change anything that isnt't background (index 0) to the same index
    if (this_voxel_int != 0) {
      image_data[i] = (unsigned char)(7);
    }

  }
/*
    // Print some values, change one of them, then print again to check
    cout << "Original value: " << (unsigned int) image_data[28165] << endl;

    for (long i = (x * dim + y * dim + z)  ; i <  (x * dim + y * dim + z + 100)  ; i++) {
    cout << (unsigned int)(image_data[i]) << " ";
    }

    image_data[28165] = (unsigned char)(6);
    cout << endl << "Changed value: " << (unsigned int) image_data[28165] << endl;

    for (long i = (x * dim + y * dim + z)  ; i <  (x * dim + y * dim + z + 100)  ; i++) {
    cout << (unsigned int)(image_data[i]) << " ";
    }
*/
  }
